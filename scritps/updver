#!/usr/bin/env bash

#TODO: check NEWVERSION value. Pattern: v<0-255>.<0-255>.<0-255>.
#TODO: check NEWVERSION is greater than previous and does not exist already
#TODO: update CHANGELOG: set new version and date


VERSION="$1"
FILEVERSION="VERSION.txt"
FILECHANGELOG="CHANGELOG.md"
# TODO: regex does not check number limits 0 < VERSION <= 255
VERSION_PATTERN="v[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}"

function usage()
{
    echo "Usage: updver.sh VERSION"
    echo "VERSION pattern v[0-255].[0-255].[0-255]"
    return 0
}

function die()
{
    usage
    exit 1
}

function update_master()
{
    if ! git checkout --quiet master; then
        echo "Current branch has uncommited changes. Cannot switch to master"
        exit 1
    fi
    git rebase develop
}

function update_develop()
{
    git checkout develop
    git rebase master
}

function update_version()
{
    echo "$VERSION" > "$FILEVERSION"
}

function update_changelog()
{
    RELEASE_HEADER="## [$VERSION] - ($(date '+%Y-%m-%d'))"
    sed -i "/## \[Unreleased\]/d" "$FILECHANGELOG" # delete unreleased header
    sed -i "1i ${RELEASE_HEADER}" "$FILECHANGELOG" # add release header

    git add "$FILEVERSION"
    git add "$FILECHANGELOG"
    git commit -m "tman: Bump version to $VERSION"
}

function update_remote()
{
    git tag "$VERSION"
    git tag -f latest "$VERSION"

    git push origin master
    git push origin develop
    git push --force origin latest
    git push origin "$VERSION"
    return 0
}

if [ -z "$VERSION" ]; then
    echo "updver: Version is missing"
    die
elif ! echo "$VERSION" | grep -wq "$VERSION_PATTERN"; then
    echo "updver: Invalid version"
    die
fi

# Interface logic
update_master
update_version
update_changelog
update_develop
update_remote
