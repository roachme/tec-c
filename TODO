Milestones:
  1. Need to refactor task column switch. There're many questions: should I
     add builtin columns, can it be moved to plugin, etc.
  2. Command to list task needs brainstorming as well.
  3. How to implement workflow engine. Yeah, there is such thing.
  4. How to add support for multi-users. Will it break existing code


Priorities:
  high - bugfix, hotfix and feature tasks.
  mid  - constant stuff like make it faster, smaller, etc.
  low  - when you get time

Bugs:
+ 1. Command `tman col prev <TASKID>` moves task to column 'prev' even if no current task ID is set.
  2. Command `tman move` can't move multiple task to another project.
  3. Command `tman move` cant move 2 task to destination. It simply renames it.
+ 4. Command `tman set -d 'description'` causes malloc fail, when set longer
     description than before.
  5. NULL-termination should follow `strncpy(dst, src, len)`. In case `src`
     is equal to `len` it'll end without '\0'. Checked it with valgrind.
  6. Command `tman move` does not work after adding new feature to support boards.

Ideas:
  1. Replace cat & ls hooks with reading from file. Gonna highly optimize
     command exection.
  2. Add multiple users.
  3. Add support for plugin to use libtman/tman commands.
+ 4. Add support to pass system config values via option to util.
+ 5. Add option to show task columns in command `tman col`.
+ 6. Add plugin `note` to take notes. Synopsis: tman note [OPTION]... COMMAND
  7. Add plugin workflow to move task from columns to column
  8. Add libtman NOT as submodule but dependency
  9. Use command `gh` to generate releases
 10. Unify project/board/task's unit and column modules.
 11. Add config option to enable/disable board support in project.
 12. Add commands export/import to move tasks in and out of boards.
 13. Add short list of exit statuses, other than libtman provides.
 14. Add support for command 'tman sync -n', to add task to curr column, but not change to task directory
 15. Make ID generatation bigger than the last ID. Might run outta IDs, but just think about it.
 16. Add support for mark into `tman list`. For builtin and custom columns
 17. Add task directory option for command `tman init [DIR]`. If nothing's passed use value from config file.
     If nothing found in there then use current directory
 18. Add errstr along with errno. It'l be used to specify invalid input argument or something
 19. Rename module 'unit' to linked list in lib part.
 20. Add support to unit module not to change file content if new data is the same as old ones.

Prio: high
+ 1. Write config file parser and define config itself.
  2. Find a good way to invoke hooks
  3. Find good structures for commands like list and cat.
+ 4. Use dynamic memory allocation so there'd be no limit on number of tasks in enviroment.
  5. Add a support for a user to add custom task columns.
+ 6. Add a good manual system.
  7. Plugin gun (for git repos) depends on system unit date. Outta create its own one.
+ 8. tman_check_prj() does not fail if prj == NULL, tho it should.
+ 9. Add support to config file to parse $HOME in path. It'll be convient for a user.
 10. Add debug prints to commands. Pro'ly as option -v.
+11. Maybe it's better to move `tman link` to plugin?
 12. Refactor plugin's option and argument parser
 13. Add tman option -F for config path
+14. `struct unit` is duplicated in tman.h and unit.h
+15. Move `tman find` to plugin.
+16. Move hooks to cli part.


Prio: mid
+ 1. Command `set' can't change task type.
+ 2. Add a style checker.
+ 3. Unify commands list and find.
+ 4. Add case-sensetive option to command list.
+ 5. Delete function tman_id_find_by_desc(). Use tman_id_list() instead in cli.
+ 6. Print PWD in /tmp/tmanpwd. Then shell part will it from there.
+ 7. In command `add`: if no ID provided then generate task ID.
+ 8. Why use tman_get_args() if tman_check_arg_id() get default values anyway?
  9. Delete option `-A' from command `tman list`. Cuz i can use option `-a'
+10. Module unit has unit_set() and unit_add(). Delete unit_add() cuz unit_set()
     will check if key exists and change it its value or adds new key-value in the end.

Prio: low
  1. Add command autocomplitions
  7. Fucking OPTIMIZED core commands. The latency should be <= 0.01 with 100 tasks
